{"version":3,"sources":["logo.svg","component/color_box.jsx","App.js","reportWebVitals.js","index.js"],"names":["ColorBox","props","bgColor","textColor","textContent","divStyle","className","style","App","useState","score","setScore","colors","question","setQuestion","getRandomItem","items","Math","floor","random","length","getDifferentColor","baseColor","color","setColor","isCorrect","setIsCorrect","isStarted","setIsStarted","handlerAnswer","e","answer","target","innerText","console","log","setNextQuestion","textColorMatchTextContentQuestion","textBackgroundMatchTextContentQuestion","questionStyle","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21ac36fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './color_box.css';\nexport default function ColorBox(props) {\n    const {bgColor, textColor, textContent} = props;\n\n    const divStyle = {\n        'backgroundColor': bgColor,\n        'color': textColor\n      };\n\n    return (\n    <div className='colorBox' style={divStyle}>\n        <span>{textContent}</span>\n    </div>);\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport ColorBox from './component/color_box';\nimport './component/button.css';\nimport {useState} from 'react';\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const colors = ['red', 'blue', 'green', 'purple', 'yellow'];\n  const [question, setQuestion] = useState('');\n\n  function getRandomItem(items) {\n    return items[Math.floor(Math.random() * items.length)]\n  }\n\n  function getDifferentColor(baseColor) {\n    let color = getRandomItem(colors);\n    while (color === baseColor) {\n      color = getRandomItem(colors);\n    }\n    return color;\n  }\n  const [color, setColor] = useState({\n    bgColor: '',\n    textContent: '',\n    textColor: ''\n  });\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [isStarted, setIsStarted] = useState(false);\n\n\n  function handlerAnswer(e) {\n    const answer = e.target.innerText === 'Yes'\n    console.log(answer);\n    console.log(isCorrect);\n    if (answer === isCorrect) {\n      const newScore = score + 1;\n      setScore(newScore);\n    }\n    setNextQuestion();\n  }\n\n  function setNextQuestion() {\n    const heads = Math.floor(Math.random() * (100)) < 50;\n    if (heads) {\n      textColorMatchTextContentQuestion();\n      setQuestion('Does the text color match the text?');\n    } else {\n      textBackgroundMatchTextContentQuestion();\n      setQuestion('Does the background color match the text?');\n    }\n  }\n\n  function textColorMatchTextContentQuestion() {\n    const correctAnswer = Math.floor(Math.random() * (100)) < 50;\n    if (correctAnswer) {\n      const textContent =  getRandomItem(colors);\n      const textColor = textContent;\n      const bgColor = getDifferentColor(textColor);\n      setColor({\n        bgColor,\n        textContent,\n        textColor\n      })\n      setIsCorrect(true);\n    } else {\n      const textContent = getRandomItem(colors);\n      const textColor = getDifferentColor(textContent);\n      const bgSameColor = Math.floor(Math.random() * (100)) < 50;\n      let bgColor = textContent;\n      if (!bgSameColor) {\n        bgColor = getDifferentColor(textColor);\n      }\n      setColor({\n        bgColor,\n        textContent,\n        textColor\n      })\n      setIsCorrect(false);\n    }\n  }\n\n  function textBackgroundMatchTextContentQuestion() {\n    const correctAnswer = Math.floor(Math.random() * (100)) < 50;\n    if (correctAnswer) {\n      const textContent =  getRandomItem(colors);\n      const textColor = getDifferentColor(textContent);\n      const bgColor = textContent;\n      setColor({\n        bgColor,\n        textContent,\n        textColor\n      })\n      setIsCorrect(true);\n    } else {\n      const textContent = getRandomItem(colors);\n      const bgColor = getDifferentColor(textContent);\n      const textColorSameColor = Math.floor(Math.random() * (100)) < 50;\n      let textColor = textContent;\n      if (!textColorSameColor) {\n        textColor = getDifferentColor(textColor);\n      }\n      setColor({\n        bgColor,\n        textContent,\n        textColor\n      })\n      setIsCorrect(false);\n    }\n  }\n\n  const questionStyle = {\n    'fontSize': 'large'\n  }\n\n\n  return (  \n    <div className=\"App\">\n      {isStarted ?      \n       <div className=\"container\">\n        <div style={questionStyle}>Score: {score}</div>\n        <div style={questionStyle}>{question}</div>\n        <hr></hr>\n        <ColorBox bgColor={color.bgColor} textColor={color.textColor} textContent={color.textContent}/>\n        <div className=\"button-container\">\n          <button className={`button button-green`} onClick={handlerAnswer}>Yes</button>\n          <button className={`button button-red`} onClick={handlerAnswer}>No</button>\n        </div>\n        \n      </div> : \n      <button onClick={() => {\n        setNextQuestion();\n        setIsStarted(true);\n      }}>Start!</button>}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}